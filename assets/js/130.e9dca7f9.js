(window.webpackJsonp=window.webpackJsonp||[]).push([[130],{762:function(t,a,s){"use strict";s.r(a);var e=s(42),i=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#前言"}},[t._v("前言")])]),s("li",[s("a",{attrs:{href:"#git-经典图"}},[t._v("Git 经典图")]),s("ul",[s("li",[s("a",{attrs:{href:"#图中的几个专用名词解释"}},[t._v("图中的几个专用名词解释：")])])])]),s("li",[s("a",{attrs:{href:"#git-提交可能遇到的一些问题"}},[t._v("git 提交可能遇到的一些问题")]),s("ul",[s("li",[s("a",{attrs:{href:"#git-想丢弃还没有到暂存区的代码修改-不想一个一个去撤销代码-把当前所有修改代码丢弃"}},[t._v("git 想丢弃还没有到暂存区的代码修改，不想一个一个去撤销代码，把当前所有修改代码丢弃")])]),s("li",[s("a",{attrs:{href:"#git-已经提交"}},[t._v("git 已经提交")])]),s("li",[s("a",{attrs:{href:"#git-提交到本地仓库有问题怎么办"}},[t._v("git 提交到本地仓库有问题怎么办？")])]),s("li",[s("a",{attrs:{href:"#git-代码已经-push-上去发现有问题"}},[t._v("Git 代码已经 push 上去发现有问题")])])])]),s("li",[s("a",{attrs:{href:"#git-关于暂存的问题"}},[t._v("Git 关于暂存的问题")])]),s("li",[s("a",{attrs:{href:"#git-分支相关问题"}},[t._v("Git 分支相关问题")]),s("ul",[s("li",[s("a",{attrs:{href:"#问题1-我想把本地创建的一个分支-koalanode提交到远程-并且远程分支名称要求-nodescript-且还未创建-需要怎能做"}},[t._v("问题1：我想把本地创建的一个分支 koalanode提交到远程，并且远程分支名称要求 nodescript，且还未创建，需要怎能做？")])])])]),s("li",[s("a",{attrs:{href:"#git-用户名密码邮箱相关问题"}},[t._v("git 用户名密码邮箱相关问题")]),s("ul",[s("li",[s("a",{attrs:{href:"#公司仓库有账号密码-自己的github有账户密码-两个不同账户-有一次提交发现自己仓库的邮箱提交成了公司仓库设置的邮箱-有点尴尬-为什么会出现这种问题呢"}},[t._v("公司仓库有账号密码，自己的github有账户密码，两个不同账户，有一次提交发现自己仓库的邮箱提交成了公司仓库设置的邮箱，有点尴尬，为什么会出现这种问题呢？")])]),s("li",[s("a",{attrs:{href:"#为什么我每次提交都需要输入github的密码-这个步骤如何省去"}},[t._v("为什么我每次提交都需要输入github的密码，这个步骤如何省去？")])])])]),s("li",[s("a",{attrs:{href:"#提交相关问题"}},[t._v("提交相关问题")])]),s("li",[s("a",{attrs:{href:"#几个开发中常用的命令没有做分类"}},[t._v("几个开发中常用的命令没有做分类")])]),s("li",[s("a",{attrs:{href:"#关于-merge-可能出现的问题"}},[t._v("关于 merge 可能出现的问题")])]),s("li",[s("a",{attrs:{href:"#git-工作流"}},[t._v("git 工作流")])]),s("li",[s("a",{attrs:{href:"#git-提交规范"}},[t._v("git 提交规范")])]),s("li",[s("a",{attrs:{href:"#git-工具"}},[t._v("Git 工具")])]),s("li",[s("a",{attrs:{href:"#vim-常用命令"}},[t._v("vim 常用命令")])]),s("li",[s("a",{attrs:{href:"#总结"}},[t._v("总结")])])])]),s("p"),t._v(" "),s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),s("p",[t._v("Git 命令对于程序员的你来说再熟悉不过，但是发现好多小伙伴都是会一些基本的提交流程，当使用过程中遇到问题的时，查到的命令还不敢用，总是请教组里那几个精通 Git 小伙伴。本文对 Git 使用过程中常出现的问题进行总结并且对 Git 的一些误区概念说明了一些，看完后记得自己尝试下，希望你也能成为组里被请教的那 个 Git 小能手。")]),t._v(" "),s("h2",{attrs:{id:"git-经典图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-经典图"}},[t._v("#")]),t._v(" Git 经典图")]),t._v(" "),s("p",[t._v("(../../.vuepress/public/images/170defa8173379ee.jpg)")]),t._v(" "),s("p",[t._v("一张经典的 Git 流程图(来源阮一峰老师的博客)")]),t._v(" "),s("h3",{attrs:{id:"图中的几个专用名词解释"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#图中的几个专用名词解释"}},[t._v("#")]),t._v(" 图中的几个专用名词解释：")]),t._v(" "),s("ol",[s("li",[t._v("Workspace: 工作区")]),t._v(" "),s("li",[t._v("Index / Stage: 暂存区")]),t._v(" "),s("li",[t._v("Repository: 本地仓库")]),t._v(" "),s("li",[t._v("Remote: 远程仓库")])]),t._v(" "),s("h2",{attrs:{id:"git-提交可能遇到的一些问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-提交可能遇到的一些问题"}},[t._v("#")]),t._v(" git 提交可能遇到的一些问题")]),t._v(" "),s("h3",{attrs:{id:"git-想丢弃还没有到暂存区的代码修改-不想一个一个去撤销代码-把当前所有修改代码丢弃"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-想丢弃还没有到暂存区的代码修改-不想一个一个去撤销代码-把当前所有修改代码丢弃"}},[t._v("#")]),t._v(" git 想丢弃还没有到暂存区的代码修改，不想一个一个去撤销代码，把当前所有修改代码丢弃")]),t._v(" "),s("p",[t._v("git checkout .")]),t._v(" "),s("h3",{attrs:{id:"git-已经提交"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-已经提交"}},[t._v("#")]),t._v(" git 已经提交")]),t._v(" "),s("h3",{attrs:{id:"git-提交到本地仓库有问题怎么办"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-提交到本地仓库有问题怎么办"}},[t._v("#")]),t._v(" git 提交到本地仓库有问题怎么办？")]),t._v(" "),s("h4",{attrs:{id:"情况一-最近一次-commit-的代码有问题怎么办"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#情况一-最近一次-commit-的代码有问题怎么办"}},[t._v("#")]),t._v(" 情况一：最近一次 commit 的代码有问题怎么办？")]),t._v(" "),s("p",[t._v("这时候可能有小伙伴说直接修改再提交一次不就好了，这里说一下优雅的方式，不进行再一次提交，修改这次提交。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" 我是修改内容.txt\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit --amend\n")])])]),s("p",[t._v("【amend】修正，会对最新一条 commit 进行修正，会把当前 commit 里的内容和暂存区（stageing area）里的内容合并起来后创建一个新的 commit，用这个新的 commit 把当前 commit 替换掉。")]),t._v(" "),s("p",[t._v("输入上面的命令后，Git 会进入提交信息编辑界面，然后你可以删除之前的 changeId，并且修改或者保留之前的提交信息，:wq 保存按下回车后，你的 commit 就被更新了。")]),t._v(" "),s("p",[t._v("对于 amend 还可能出现几种小问题，下面列举下：")]),t._v(" "),s("h5",{attrs:{id:"刚刚写的提交信息有问题-想修改怎么办"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#刚刚写的提交信息有问题-想修改怎么办"}},[t._v("#")]),t._v(" 刚刚写的提交信息有问题，想修改怎么办？")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit --amend -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"新的提交信息"')]),t._v("\n")])])]),s("h5",{attrs:{id:"刚刚提交完代码发现-我有个文件没保存-漏了提交上去怎么办"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#刚刚提交完代码发现-我有个文件没保存-漏了提交上去怎么办"}},[t._v("#")]),t._v(" 刚刚提交完代码发现，我有个文件没保存，漏了提交上去怎么办？")]),t._v(" "),s("p",[t._v("最简单的方式，再次 commit：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v("  commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"提交信息"')]),t._v("\n")])])]),s("p",[t._v("另一中方式,使用--no-edit，它表示提交信息不会更改，在 git 上仅为一次提交。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" changgeFile // changeFile 刚刚漏了提交的文件\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit --amend --no-edit\n")])])]),s("h4",{attrs:{id:"情况二-最新提交的代码没问题-它上一次提交的有问题怎么办"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#情况二-最新提交的代码没问题-它上一次提交的有问题怎么办"}},[t._v("#")]),t._v(" 情况二：最新提交的代码没问题，它上一次提交的有问题怎么办？")]),t._v(" "),s("p",[t._v("上面说的是最新一次的提交出了问题，接下来说之前提交的代码发现有问题了想修改，应该怎么办？\n需要一个新的命令：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase -i \n")])])]),s("p",[t._v("rebase -i 是 rebase --interactive 的缩写形式，意为「交互式 rebase」。所谓「交互式 rebase」，就是在 rebase 的操作执行之前，你可以指定要 rebase 的 commit 链中的每一个 commit 是否需要进一步修改。")]),t._v(" "),s("blockquote",[s("p",[t._v("注意点：看 commit 历史的时候，最新的提交在最下面，刚开始使用时候总是搞错。")])]),t._v(" "),s("p",[t._v("输入上面的命令后，会进入下面的编辑界面。")]),t._v(" "),s("p",[t._v("(../../.vuepress/public/images/170defc0052e9653.jpg)")]),t._v(" "),s("p",[t._v("根据编辑界面中的提示，我们把要修改的倒数第二个 commit，也就是上面的【修改代码格式首行缩进】前面 pick 指令改为 edit。edit的意思编辑器中已给了解释，应用这个commit，但是停下来修正。改完之后，esc退出，:wq 保存。")]),t._v(" "),s("p",[t._v("会显示如下信息。")]),t._v(" "),s("p",[t._v("(../../.vuepress/public/images/170defc711daac8c.jpg)")]),t._v(" "),s("p",[t._v("这个rebase过程已经停在倒数第二个 commit 的位置了，修改完成你要修改的内容，再次提交。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit --amend\n")])])]),s("p",[t._v("然后继续 rebase 过程,使用 rebase --continue 来继续 rebase 过程，把后面的 commit 直接应用上去。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rabase --continue\n")])])]),s("blockquote",[s("p",[t._v("另外在使用git rebase -i 的时候，里面带了不同的指令，都可以对已有的提交进行一些操作，比如 squash 对多个 commit 合并成一个 commit。")])]),t._v(" "),s("h4",{attrs:{id:"情况三-刚刚写完的提交太烂了-不想改了-想直接丢弃怎么办"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#情况三-刚刚写完的提交太烂了-不想改了-想直接丢弃怎么办"}},[t._v("#")]),t._v(" 情况三：刚刚写完的提交太烂了，不想改了，想直接丢弃怎么办？")]),t._v(" "),s("p",[t._v("你可以用 reset --hard 来撤销 commit")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git reset --hard HEAD^\n")])])]),s("p",[t._v("HEAD 表示 HEAD^ 往回数一个位置的 commit ，HEAD^ 表示你要恢复到哪个 commit。因为你要撤销最新的一个 commit，所以你需要恢复到它的父 commit ，也就是 HEAD^。那么在这行之后，你的最新一条就被撤销了。")]),t._v(" "),s("h3",{attrs:{id:"git-代码已经-push-上去发现有问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-代码已经-push-上去发现有问题"}},[t._v("#")]),t._v(" Git 代码已经 push 上去发现有问题")]),t._v(" "),s("h4",{attrs:{id:"如果出错内容还在本地私有分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如果出错内容还在本地私有分支"}},[t._v("#")]),t._v(" 如果出错内容还在本地私有分支")]),t._v(" "),s("p",[t._v("这种情况你修改后，再次提交会报错，由于你在本地对已有的 commit 做了修改，这时你再 push 就会失败，因为中央仓库包含本地没有的 commits。这种情况只在你自己的分支 branch1 ，可以使用强制 push 的方式解决冲突。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin branch1 -f\n")])])]),s("p",[t._v("-f 是 --force 的缩写，意为「忽略冲突，强制 push」")]),t._v(" "),s("h4",{attrs:{id:"如果出错内容已经-push-到了-master-分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如果出错内容已经-push-到了-master-分支"}},[t._v("#")]),t._v(" 如果出错内容已经 push 到了 master 分支")]),t._v(" "),s("p",[t._v("这种情况可以使用 Git 的 revert 指令。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" revert HEAD^\n")])])]),s("p",[t._v("上面这行代码就会增加一条新的 commit，它的内容和倒数第二个 commit 是相反的，从而和倒数第二个 commit 相互抵消，达到撤销的效果。")]),t._v(" "),s("p",[t._v("在 revert 完成之后，把新的 commit 再 push 上去，这个 commit 的内容就被撤销了。")]),t._v(" "),s("blockquote",[s("p",[t._v("revert 与前面说的 reset 最主要的区别是，这次改动只是被「反转」了，并没有在历史中消失掉，你的历史中会存在两条 commit ：一个原始 commit ，一个对它的反转 commit。")])]),t._v(" "),s("h2",{attrs:{id:"git-关于暂存的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-关于暂存的问题"}},[t._v("#")]),t._v(" Git 关于暂存的问题")]),t._v(" "),s("p",[t._v("假如正在开发手中需求的时候，突然来了个紧急 bug 要修复，这时候需要先 stash 已经写的部分代码，使自己返回到上一个 commit 改完 bug 之后从缓存栈中推出之前的代码，继续工作。")]),t._v(" "),s("ul",[s("li",[t._v("添加缓存栈: git stash")]),t._v(" "),s("li",[t._v("查看缓存栈: git stash list")]),t._v(" "),s("li",[t._v("推出缓存栈: git stash pop")]),t._v(" "),s("li",[t._v("取出特定缓存内容：git stash apply stash@{1}")])]),t._v(" "),s("blockquote",[s("p",[t._v("注意：没有被 track 的文件（即从来没有被 add 过的文件不会被 stash 起来，因为 Git 会忽略它们。如果想把这些文件也一起 stash，可以加上 "),s("code",[t._v("-u")]),t._v(" 参数，它是 "),s("code",[t._v("--include-untracked")]),t._v(" 的简写。就像这样："),s("code",[t._v("git stash -u")])])]),t._v(" "),s("h2",{attrs:{id:"git-分支相关问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-分支相关问题"}},[t._v("#")]),t._v(" Git 分支相关问题")]),t._v(" "),s("p",[t._v("分支中的常用命令：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("git 拉取指定分支的代码： git clone -b 分支名称 地址")])]),t._v(" "),s("li",[s("p",[t._v("查看当前分支：git branch")])]),t._v(" "),s("li",[s("p",[t._v("查看远程分支：git branch -a")])]),t._v(" "),s("li",[s("p",[t._v("创建并切换分支：git checkout -b add_orderdesc")])]),t._v(" "),s("li",[s("p",[t._v("切换分支：git checkout 分支名称")])]),t._v(" "),s("li",[s("p",[t._v("查看当前的本地分支与远程分支的关联关系：git branch -vv")])]),t._v(" "),s("li",[s("p",[t._v("合并当前分支代码到master：")])])]),t._v(" "),s("h3",{attrs:{id:"问题1-我想把本地创建的一个分支-koalanode提交到远程-并且远程分支名称要求-nodescript-且还未创建-需要怎能做"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#问题1-我想把本地创建的一个分支-koalanode提交到远程-并且远程分支名称要求-nodescript-且还未创建-需要怎能做"}},[t._v("#")]),t._v(" 问题1：我想把本地创建的一个分支 koalanode提交到远程，并且远程分支名称要求 nodescript，且还未创建，需要怎能做？")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("我先在远程建了一个分支 nodescript，我本地也有这么一个分支，名字和远程的分支名称还不一样。首先，我把我本地的分支名称修改成和远程分支相同。")])]),t._v(" "),s("li",[s("p",[t._v("将本地新建分支push到自己的本地远程origin上，因为只在本地创建了一个新的分支，远程    origin 上还没有该分支")])])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin nodescript\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[t._v("把本地分支与远程origin的分支进行关联处理(通过 --set-upstream-to 命令)")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch --set-upstream-to"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("origin/add_orderdesc\n")])])]),s("ol",{attrs:{start:"4"}},[s("li",[t._v("再次通过 "),s("code",[t._v("git branch -vv")]),t._v(" 查看分支的关联关系，可见本地分支已于origin的分支建立上了关联关系,之后我们每次 push 或者 pull 的时候，只需要输入git push 或者git pull")])]),t._v(" "),s("h2",{attrs:{id:"git-用户名密码邮箱相关问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-用户名密码邮箱相关问题"}},[t._v("#")]),t._v(" git 用户名密码邮箱相关问题")]),t._v(" "),s("h3",{attrs:{id:"公司仓库有账号密码-自己的github有账户密码-两个不同账户-有一次提交发现自己仓库的邮箱提交成了公司仓库设置的邮箱-有点尴尬-为什么会出现这种问题呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#公司仓库有账号密码-自己的github有账户密码-两个不同账户-有一次提交发现自己仓库的邮箱提交成了公司仓库设置的邮箱-有点尴尬-为什么会出现这种问题呢"}},[t._v("#")]),t._v(" 公司仓库有账号密码，自己的github有账户密码，两个不同账户，有一次提交发现自己仓库的邮箱提交成了公司仓库设置的邮箱，有点尴尬，为什么会出现这种问题呢？")]),t._v(" "),s("p",[t._v("首先这个你在刚开始安装一趟的时候应该就用过:")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("// 设置查看 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" 用户名和邮箱\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config user.name   --查看git当前配置用户名\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config user.email  --查看git当前配置的邮箱\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config user.name 名称 设置用户名\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config user.email 邮箱 设置git邮箱\n")])])]),s("p",[t._v("全局命令设置")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config  --global user.name 你的目标用户名；\n\n "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config  --global user.email 你的目标邮箱名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("在项目中也可以查看这些信息")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("vi")]),t._v(" ~/.gitconfig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("知道了这些配置修改之后，你可以选择全局配置下，在公司电脑，或者提交前自己看下，就不会再出现上面的尴尬问题了。")]),t._v(" "),s("h3",{attrs:{id:"为什么我每次提交都需要输入github的密码-这个步骤如何省去"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么我每次提交都需要输入github的密码-这个步骤如何省去"}},[t._v("#")]),t._v(" 为什么我每次提交都需要输入github的密码，这个步骤如何省去？")]),t._v(" "),s("h2",{attrs:{id:"提交相关问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#提交相关问题"}},[t._v("#")]),t._v(" 提交相关问题")]),t._v(" "),s("p",[t._v("如何修改已经提交的内容")]),t._v(" "),s("h2",{attrs:{id:"几个开发中常用的命令没有做分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#几个开发中常用的命令没有做分类"}},[t._v("#")]),t._v(" 几个开发中常用的命令没有做分类")]),t._v(" "),s("ol",[s("li",[t._v("git checkout . 和 git checkout --filename\n测试服务器测试时候，发现有一个bug，临时修改下里面的代码，测试一下问题是否解决，再去git仓库拉取新的代码时候，可以用上面的命令忽略掉刚才的修改")])]),t._v(" "),s("p",[t._v("网上的说法是：git checkout -- filename的作用是把filename文件在工作区的修改撤销到最近一次git add 或 git commit时的内容")]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("如何修改已经提交到远程的代码\n场景：提交了代码gerrit ，领导看了代码之后，发现有一些问题需要修改，需要做一些修改，再次提交。\n查看当前分支你提交上次一到节点commitid是多少，这种情况可以通过工具看，也可以通过git log 命令查看")])]),t._v(" "),s("p",[t._v("去gerrit中Abandon，然后执行\ngit reset 1dc340d792deace324e1ee9ec2f9f0a69d22b9c0，注意这个id是你当前分支上一个提交节点，然后会发现代码恢复到了提交前状态，再次修改问题，重新提交代码就可以，还是比较常见的操作。")]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li")]),t._v(" "),s("h2",{attrs:{id:"关于-merge-可能出现的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关于-merge-可能出现的问题"}},[t._v("#")]),t._v(" 关于 merge 可能出现的问题")]),t._v(" "),s("h2",{attrs:{id:"git-工作流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-工作流"}},[t._v("#")]),t._v(" git 工作流")]),t._v(" "),s("h2",{attrs:{id:"git-提交规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-提交规范"}},[t._v("#")]),t._v(" git 提交规范")]),t._v(" "),s("p",[t._v("这里只列举我常用的提交格式类型")]),t._v(" "),s("ul",[s("li",[t._v("feat：新功能（feature）")]),t._v(" "),s("li",[t._v("fix：修补bug")]),t._v(" "),s("li",[t._v("docs：文档（documentation）")]),t._v(" "),s("li",[t._v("style： 格式（不影响代码运行的变动）")]),t._v(" "),s("li",[t._v("refactor：重构（即不是新增功能，也不是修改bug的代码变动）")]),t._v(" "),s("li",[t._v("test：增加测试")]),t._v(" "),s("li",[t._v("chore：其他修改，比如构建过程或辅助工具的变动")])]),t._v(" "),s("p",[t._v("git 更详细的提交规范可以看一下阮一峰老师的这篇文章，非常棒\n"),s("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Commit message 和 Change log 编写指南"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"git-工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-工具"}},[t._v("#")]),t._v(" Git 工具")]),t._v(" "),s("p",[t._v("网上一些 Git 工具很多，推荐一个SourceThree，但是个人还是比较喜欢用  Git 命令，不然你会发现这项技能慢慢蜕化了，而且一些工具提交时总是带一些我不懂的参数。平时工具和 Git 命令配个使用，用它的可视化图表看提交是否有问题，当然也有公司觉得用命令没有工具安全的，自己选择就好了，嘿嘿。")]),t._v(" "),s("p",[t._v("SourceThree 下载地址：https://www.sourcetreeapp.com/")]),t._v(" "),s("h2",{attrs:{id:"vim-常用命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vim-常用命令"}},[t._v("#")]),t._v(" vim 常用命令")]),t._v(" "),s("p",[t._v("使用 Git 的时候，偶尔会对 Vim 中对 shell 脚本进行简单操作，为了节约时间，列出几个常用的 vim 快捷命令。")]),t._v(" "),s("ul",[s("li",[t._v("a,i,r,o,A,I,R,O\t进入编辑模式")]),t._v(" "),s("li",[t._v(":q\t一般退出")]),t._v(" "),s("li",[t._v(":q!\t退出不保存")]),t._v(" "),s("li",[t._v(":wq\t保存退出")]),t._v(" "),s("li",[t._v("yy\t复制当前行的内容")]),t._v(" "),s("li",[t._v("ZZ\t保存离开")]),t._v(" "),s("li",[t._v("dd\t删除光标当前行")])]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("本文对 Git 使用过程中常出现的问题进行了一个总结，后面遇到问题也会不断更新，可以收藏本文，需要的时候查阅，最后建议在记忆的时候围绕文初的图片，多使用。希望本文能帮助到小伙伴们。")]),t._v(" "),s("p",[t._v("参考文章：\nvim 常用快捷键大全\nhttps://www.jianshu.com/p/dde77e3b299f\ngit 提交规范\nhttps://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html")]),t._v(" "),s("p",[t._v("附件：\n一张git常用图片")])])}),[],!1,null,null,null);a.default=i.exports}}]);